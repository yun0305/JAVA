package ch15Data_Structure_Collection_Framework;

/*<컬렉션 자료구조>
 * 
 * 컬력션은 모음을 뜻한다. 무엇을 모은다는 것일까? 객체이다. 객체를 저장할수 있는 자료 구조이다.
 * 배열도 객체를 저장한다.
 * 
 * 예로
 * Member[] member = new Member[10]; 이런식으로 만들수 있다.
 * member[0] = new Member();
 * member[1] = new Member(); 이런식으로 객체를 생성해서 저장 할수 있다.
 * 
 * 배열도 하나의 자료구조이다. 배열의 특징은 2가지가 있다.
 * 
 * 1.같은 타입만 저장 가능하다.
 * 2.길이를 변경할수 없다.
 * 
 * 만약 길이가 10 짜리 배열을 쓰다가 11개 짜리 배열을 사용하려면
 * 배열을 복사해서 새로운 배열을 만들고 거기에 복사를 해야한다.
 * 
 * 15장의 컬랙션의 경우 배열과 유사한데 배열과는 다른 특징이 있다.
 * 
 * 배열처럼 같은 타입만 저장할수 있도록 만들기도 하고 다양한 타입이 저장될수 있도록 만들수 있는데
 * 하지만 보통 같은 타입만 가능하게 만든다.
 * 
 * 그리고 컬랙션은 길이가 고정되어있지 않다. 저장 방식도 조금 다른데 키를 주고 값을 주는 방식도 있다.
 * 
 * 프레임 워크란 짜여진 틀을 이야기 한다.
 * 
 * 컬랙션은 자바가 다양한 객체를 효율적으로 저장하기 위해서 이미 정해놓은 클래스, 인터페이스를 제공한다.
 * 이와 같은 클래스와 인터페이스는 java.util에 있다.
 * 
 * 컬랙션 프레임 워크는 몇가지 인터페이스를 통해서 다양한 컬렉션 클래스를 이용할 수 있도록 설계되어 있다.
 * 주요 인터페이스러는 List, Set, Map 이 있는데, 이 인터페이스로 사용 가능한 컬랙션
 * 객체의 종류는 다음과 같다.
 * 
 * <List  Set  Map>
 * List와 set은 Collection 인터페이스를 상속 받아서 만들어 졌다.
 * 둘은 똑같은 부모를 상속 받아서 기능이 비슷한게 많다.
 * 
 * 하지만 Map은 Collection을 상속 받지 않기 때문에 저장 방식 사용방식 이 좀 다르다,
 * 
 * List와 Set은 객체를 추가, 삭제, 검색하는 방법에 있어서 공통점이 있기 때문에 공통된 메소드만 따로 모아
 * Collection 인터페이스로 정의해 두고 이것을 상속하고 있다. Map은 키와 값을 하나의 쌍으로 묶어서 관리하는 구조로 되어 있어
 * List 및 Set과는 사용 방법이 다르다. 다음은 각 인터페이스 별로 사용할 수 있는 컬렉션의 특징을 정리한 것이다.
 * 
 * 인터페이스 분류		특징								구현 클래스
 * 
 * 				List	순서를 유지하고 저장(배열 인덱스)	ArrayList,Vector,
 * 						중복저장 가능						LinkedList					
 * Collection
 * 				Set		순서를 유지하지 않고저장			HashSet, ThreeSet
 * 						종복저장 안됨
 * 
 * 		Map				키와 값으로 구성된 엔트리 저장 		HashMap,Hashtable,
 * 						키는 중복 저장 안됨.				TreeMap, Properties
 * 
 * 
 * 
 */
public class Collection {

}
