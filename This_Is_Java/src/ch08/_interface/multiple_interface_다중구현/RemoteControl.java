package ch08._interface.multiple_interface_다중구현;

public interface RemoteControl {

	/*
	 * 구현 객체는 여러개의 인터페이스를 implements할 수 있다. 구현 객체가 인터페이스 A와
	 * 인터페이스 B를 구현하고 있다면, 각각의 인터페이스를 통해 구현 객체를 사용할 수 있다.
	 * 
	 * 구현 클래스는 다음과 같이 인터페이스 A와 인터페이스 B를 implements 뒤에 쉼표로 구분해서
	 * 작성한다. 모든 인터페이스가 가진 추상 메소드를 재정의 한다.
	 *  
	 * 예) public class 구현 클래스명 implements 인터페이스A, 인터페이스B{
	 * 	//모든 추상 메소드 재정의
	 *}
	 *  
	 */
	
	/*
	 * 다중 구현과 다중 상속의 차이점
	 * 
	 *  1. 인터페이스의 다중 상속 
	 *  	정의: 하나의 인터페이스가 여러 인터페이스를 상속받는 것을 의미한다.
	 *  
	 *  	목적: 새로운 인터페이스를 정의할 떄 기존의 인터페이스들의 기능을 모두 포함하기 위해 사용
	 *  
	 *  	특징: 인터페이스끼리는 extends 키워드를 사용하여 다중 상속이 가능하다
	 *  
	 *  	상속되는 멤버: 상수 필드, 디폴트 메소드, 추상 메소드
	 *  	
	 *  	상속되지 않는 멤버: 정적 메소드, 프라이빗 메소드
	 *  
	 *  2. 인터페이스의 다중 구현
	 *  	정의: 하나의 클래스가 여러 인터페이스를 구현하는 것을 의미한다.
	 *  
	 *  	목적: 클래스가 다양한 인터페이스의 기능을 동시에 구현할 수 있도록 하기 위해 사용된다.
	 *  
	 *  	특징: 클래스에서 implements 키워드를 사용하려 여러 인터페이스를 구현할 수 있다.
	 *  
	 *  	모든 인터페이스의 메소드를 구현해야한다.
	 *  
	 *  
	 */
	
	//추상 메소드
	void trunOn();
	void trunOff();
}
