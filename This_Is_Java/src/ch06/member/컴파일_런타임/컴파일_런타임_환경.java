package ch06.member.컴파일_런타임;

public class 컴파일_런타임_환경 {
	/*
	 * <이미지 파일과 함께보기>
	 * 
	1. 컴파일 타임 환경
	
		컴파일 타임 환경에서는 Java 소스 코드(.java)를 바이트코드(.class)로 변환하는 과정이 일어난다.
	
		자바 클래스 파일 (.java)
	
		우리가 작성한 Java 코드 파일이다. (.java 확장자를 가짐)
		예를 들어, HelloWorld.java 같은 파일이 여기에 해당함.
		자바 컴파일러 (javac)
	
		자바 컴파일러가 .java 파일을 읽어서 자바 바이트코드(.class)로 변환한다.
		바이트코드는 CPU가 직접 이해할 수 있는 기계어가 아니라 JVM이 이해할 수 있는 중간 코드다.
		자바 바이트 코드 (.class)
	
		컴파일이 완료되면 .class 확장자의 바이트코드 파일이 생성됨.
		이 파일은 JVM에서 실행 가능하지만, 운영체제나 하드웨어에서 직접 실행할 수 없음.
		예를 들어, HelloWorld.class가 생성될 수 있음.
		
	2. 런타임 환경
	
		컴파일된 .class 파일이 실행될 때의 과정이다. **JVM(Java Virtual Machine, 자바 가상 머신)**이 실행을 담당한다.
	
		(1) 클래스 로더 (Class Loader)
		.class 파일을 JVM 내부로 불러오는 역할을 함.
		자바의 기본 라이브러리 (java.lang, java.util 등) 및 사용자 정의 클래스들도 함께 로드됨.
		(2) 자바 인터프리터 (Java Interpreter) & JIT 컴파일러 (Just-In-Time Compiler)
		JVM 내부에서 .class 파일을 실행하는 방법에는 두 가지가 있음.
		✅ 자바 인터프리터 (Java Interpreter)
		.class 바이트코드를 한 줄씩 읽어서 실행함.
		빠르게 실행할 수 있지만, 실행 속도가 상대적으로 느림.
		✅ JIT(Just-In-Time) 컴파일러
		인터프리터 방식이 비효율적이기 때문에 JVM은 JIT 컴파일러를 사용하여 바이트코드를 네이티브 코드(기계어)로 변환함.
		한 번 변환된 코드는 다시 변환할 필요가 없으므로 실행 속도가 빨라짐.
		(3) 런타임 시스템
		바이트코드를 OS와 하드웨어에서 실행할 수 있도록 처리하는 단계.
		(4) 운영체제 (OS) & 하드웨어
		최종적으로 JVM이 변환한 기계어 코드가 운영체제 및 하드웨어에서 실행됨.
		🔹 정리: 자바 실행 과정 요약
		컴파일 타임
	
		자바 코드(.java) → 자바 컴파일러(javac) → 바이트코드(.class)
		런타임
	
		클래스 로더가 .class 파일을 로드함.
		인터프리터가 한 줄씩 실행하거나 JIT 컴파일러가 바이트코드를 네이티브 코드로 변환하여 실행.
		실행 결과가 운영체제(OS) 및 하드웨어에서 동작함.
		🔹 추가로 이해하면 좋은 개념
		RetentionPolicy.CLASS → 컴파일된 .class 파일에는 어노테이션이 남아 있지만, 런타임에는 사용 불가능.
		RetentionPolicy.RUNTIME → JVM이 실행하는 동안에도 어노테이션 정보가 유지되며 Reflection API를 통해 조회 가능.
		JIT 컴파일러 덕분에 인터프리터 방식보다 실행 속도가 훨씬 빠름.*/
}
