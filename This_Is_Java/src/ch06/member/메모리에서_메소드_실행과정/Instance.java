package ch06.member.메모리에서_메소드_실행과정;

public class Instance {

	/*
	 * <인스턴스 메소드의 실행 정보는 어떻게 저장될까>
	 * 		이전에 설명했던 것은 static 메소드였고, 이번에는 인스턴스 메소드에 대핸 실행 정보를 설명할거다.
	 * 	
	 * 		정적 메소드와 인스턴스 메소드의 가장 큰 차이점
	 * 			
	 * 			<정적 메소드>
	 * 				
	 * 				클래스가 로드될 떄 메소드 영역에 저장됨
	 * 				실행될 떄 스택에서 실행 정보가 생성됨
	 * 				this가 없으며, 인스턴스 필드와 인스턴스 메소드에 접근할 수 없음
	 * 
	 * 			<인스턴스 메소드>
	 * 
	 * 				클래스가 로드될 떄 메소드 영역에 저장됨
	 * 				실행될 떄 해당 객체의 실행 정보(힙메모리 주소)가 스택에 포함됨
	 * 				this를 통해 인스턴스 필드와 다른 인스턴스 메소드에 접근 가능
	 */	
}
//		1️⃣. 실행 흐름 예제 코드 (인스턴스 메서드)
 class Example {
    int num; // ✅ 인스턴스 변수 (힙 메모리에 저장됨)

    void instanceMethod(int x) { // ✅ 인스턴스 메서드
        int y = x * 2; // ✅ 지역 변수 (스택에 저장됨)
        System.out.println("y: " + y);
        System.out.println("num: " + this.num); // ✅ 힙의 인스턴스 필드 접근
    }

    public static void main(String[] args) {
        Example obj = new Example(); // ✅ 힙에 객체 생성됨
        obj.num = 5; // ✅ 인스턴스 필드 값 설정
        obj.instanceMethod(10); // ✅ 인스턴스 메서드 호출
    }
}
/*
 * 		2️.JVM의 메모리 변화 (인스턴스 메서드 실행 정보)
 * 			1️⃣ main() 실행 (스택에 main() 추가)
 * 				
 * 				메서드 영역 (Method Area)
				----------------------------
				| Example 클래스 정보       |
				| void instanceMethod() {...} |  <- 메서드 정의 (실행 X)
				| static void main() {...}   |  <- 메서드 정의 (실행 중)
				----------------------------
				
				스택 영역 (Stack)
				----------------------------
				| main() 실행 정보          | <- main() 실행됨
				----------------------------
				힙 영역 (Heap)
				----------------------------
				(비어 있음)
				
				✔ main()이 실행되면서 스택(Stack) 영역에 main() 프레임이 생성됨
				✔ 아직 객체가 생성되지 않았으므로 힙은 비어 있음

			2️⃣ new Example() 실행 (객체가 힙에 생성됨)
			
				메서드 영역 (Method Area)
				----------------------------
				| Example 클래스 정보       |
				| void instanceMethod() {...} |  <- 메서드 정의 (실행 X)
				| static void main() {...}   |  <- 메서드 정의 (실행 중)
				----------------------------
				
				스택 영역 (Stack)
				----------------------------
				| main() 실행 정보          | <- main() 실행 중
				| obj (힙 메모리 주소 저장) | <- obj 참조 변수 저장
				----------------------------
				
				힙 영역 (Heap)
				----------------------------
				| obj 객체 (Example)        |
				| num = 5                  |  <- 인스턴스 변수 초기화됨
				----------------------------
				✔ new Example() 실행으로 힙(Heap) 영역에 obj 객체가 생성됨
				✔ obj.num = 5; 실행으로 힙의 num 필드가 5로 설정됨
				✔ obj 참조 변수는 스택(Stack) 영역에 저장됨 (객체 주소 저장)

			3️⃣ instanceMethod(10) 실행 (스택에 instanceMethod() 추가)
				메서드 영역 (Method Area)
				----------------------------
				| Example 클래스 정보       |
				| void instanceMethod() {...} |  <- 메서드 정의 (실행 X)
				| static void main() {...}   |  <- 메서드 정의 (실행 중)
				----------------------------
				
				스택 영역 (Stack)
				----------------------------
				| main() 실행 정보          | <- main() 실행 중
				| obj (힙 메모리 주소 저장) |
				| instanceMethod(10) 실행 정보 | <- instanceMethod 실행됨
				| x = 10                    | 매개변수
				| y = 20                    | 지역 변수
				----------------------------
				
				힙 영역 (Heap)
				----------------------------
				| obj 객체 (Example)        |
				| num = 5                  |  <- 인스턴스 변수 유지됨
				----------------------------
				✔ 스택에 instanceMethod() 실행 정보 추가됨
				✔ 매개변수 x = 10 스택에 저장됨
				✔ 지역 변수 y = 20 스택에 저장됨
				✔ this.num을 통해 힙(Heap)에 저장된 num 값(5)에 접근

			4️⃣ instanceMethod(10) 실행 종료 (스택에서 제거됨)
				
					메서드 영역 (Method Area)
					----------------------------
					| Example 클래스 정보       |
					| void instanceMethod() {...} |  <- 메서드 정의 (실행 X)
					| static void main() {...}   |  <- 메서드 정의 (실행 중)
					----------------------------
					
					스택 영역 (Stack)
					----------------------------
					| main() 실행 정보          | <- main() 실행 중
					| obj (힙 메모리 주소 저장) |
					----------------------------
					
					힙 영역 (Heap)
					----------------------------
					| obj 객체 (Example)        |
					| num = 5                  |  <- 인스턴스 변수 유지됨
					----------------------------
					✔ 메서드 실행이 종료되면서, instanceMethod(10)의 실행 정보가 스택에서 제거됨.
					✔ 하지만 힙의 obj 객체는 여전히 유지됨.

			5️⃣ main() 실행 종료 (스택에서 제거됨)
			
				메서드 영역 (Method Area)
				----------------------------
				| Example 클래스 정보       |
				| void instanceMethod() {...} |  <- 메서드 정의 (실행 X)
				| static void main() {...}   |  <- 메서드 정의 (실행 X)
				----------------------------
				
				스택 영역 (Stack)
				----------------------------
				(비어 있음) ✅ 모든 실행 종료
				----------------------------
				
				힙 영역 (Heap)
				----------------------------
				| obj 객체 (Example)        |
				| num = 5                  |  <- 여전히 존재 (GC가 제거할 때까지)
				----------------------------
				✔ main()이 종료되면서 스택이 완전히 비워짐
				✔ 힙의 객체(obj)는 참조가 없을 경우 GC(Garbage Collector)에 의해 제거됨


				🚀 결론
				✔ 인스턴스 메서드는 메서드 영역(Method Area)에 저장되지만, 실행 시 스택(Stack)에 실행 정보가 저장됨
				✔ 객체마다 힙(Heap)에 필드 값이 저장되며, this를 통해 접근 가능
				✔ 메서드 실행이 끝나면 스택에서 제거되며, 객체는 힙에 남아 있음
				✔ 즉, 실행 정보는 "스택에서 생성되고, 메서드 바이트코드는 메서드 영역에서 관리됨" 🚀
				
 * 
 * 
 * 
 */


