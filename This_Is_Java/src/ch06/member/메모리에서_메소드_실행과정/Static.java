package ch06.member.메모리에서_메소드_실행과정;

public class Static {
/*
 * <그럼 메소드의 실행 정보는 애초에 어디에 저장되는 건가>
		
		1.메소드 실행 정보란 메소드가 실행될 때 JVM이 관리하는 데이터로서 다음을 포함함
		
				메소드의 매개변수 : 메소드가 받는 인자 값 				: 스택에 저장
				지역 변수		  : 메소드 내에서 선언된 변수			: 스택에 저장
				연산 중간값		  : 연산 과정에서 임시 저장되는 값들	: 스택에 저장
				리턴 주소		  : 메소드가 끝난 후 돌아갈 위치		: 스택에 저장
				메소드 바이트코드 : 실행될 로직 자체(JVM이 해석)		: 메소드 영역에 저장
		
		2.메소드 실행 정보의 저장 과정
				
				실행흐름 예제코드
 */
				static void testMethod(int x) {
					int y = x*2;
					System.out.println("y: " + y);
				}
				
				public static void main(String[] args) {
					testMethod(10);
				}
	
}

/*
 *		3.JVM의 메모리 변화 (메소드 실행 정보)
 *
 *				1.main() 실행 (스택에 main()추가)
 *				
 *					메서드 영역 (Method Area)
						----------------------------
						| Example 클래스 정보       |
						| static void testMethod()  |  <- 메서드 정의 (실행 X)
						| static void main()        |  <- 메서드 정의 (실행 중)
						----------------------------
						
						스택 영역 (Stack)
						----------------------------
						| main() 실행 정보          | <- main() 실행됨
						----------------------------



 *				2. testMethod(10)실행 (스택에 testMetod()추가)
 *
		 				메서드 영역 (Method Area)
						----------------------------
						| Example 클래스 정보       |
						| static void testMethod()  |  <- 메서드 정의 (실행 X)
						| static void main()        |  <- 메서드 정의 (실행 중)
						----------------------------
						
						스택 영역 (Stack)
						----------------------------
						| main() 실행 정보          | <- main() 실행 중
						| testMethod(10) 실행 정보  | <- testMethod(10) 실행됨
						| x = 10                    | 매개변수
						| y = 20                    | 지역 변수
						----------------------------
			
						✔ testMethod(10)이 실행되면서 실행 정보가 스택에 적재됨.
						✔ x = 10, y = 20이 스택에 저장됨.
						✔ "y: 20"이 출력됨.


			
				3. testMethod(10) 실행 종료 (스택에서 제거됨)
 * 					
 * 					메서드 영역 (Method Area)
						----------------------------
						| Example 클래스 정보       |
						| static void testMethod()  |  <- 메서드 정의 (실행 X)
						| static void main()        |  <- 메서드 정의 (실행 중)
						----------------------------
						
						스택 영역 (Stack)
						----------------------------
						| main() 실행 정보          | <- main() 실행 중
						----------------------------
		
						✔ testMethod(10)이 종료되면서 실행 정보가 스택에서 제거됨.
						✔ 이제 main()만 남아 있음.
 *
 * 				4.main() 실행 종료 (스택에서 제거됨)
 * 
						 * 메서드 영역 (Method Area)
						----------------------------
						| Example 클래스 정보       |
						| static void testMethod()  |  <- 메서드 정의 (실행 X)
						| static void main()        |  <- 메서드 정의 (실행 X)
						----------------------------
						
						스택 영역 (Stack)
						----------------------------
						(비어 있음) ✅ 모든 실행 종료
	
					✔ main() 실행 종료 → 스택 비워짐 (프로그램 종료).
					✔ 메서드 바이트코드는 여전히 메서드 영역(Method Area)에 남아 있음.
					✔ 실행 정보(매개변수, 지역 변수, 연산값)는 모두 삭제됨.
					
					4️⃣ 실행 정보가 스택에 저장되는 이유
							메서드가 실행될 때마다 스택에 새 프레임이 생성되어 독립적인 실행 환경을 제공함.
							메서드가 종료되면 자동으로 스택에서 제거되므로, 메모리 관리를 효율적으로 수행할 수 있음.
							각 메서드 실행 정보가 개별적으로 유지되므로, 재귀 호출(Recursive Calls) 같은 기능을 쉽게 구현할 수 있음.
	
 * 
 */
 