package ch14.multi_thread.thread_pool;

/*<스레드 풀>
 * 스레드를 그때그때 만들어서 병렬처리 할수 있지만. 이거보단 스레드를 미리 10개 정도 만들어 놓는다.
 * 10개를 가지고 병렬적으로 처리한다. 왜 이렇게 하냐면 스레드를 만드는 것도 시간이 필요하기 때문에 생성시간을 줄여주기 위해서다.
 * 
 * 예를 들어보자.
 * 
 * for(int i=0;i<100;i++){
 * 		
 * 	Thread thread = new Thread(){
 * 		public void run(){
 * 			실행절...	
 * 		}
 * 	};
 * 	thread.start();
 * }
 * for문은 100번 실행한다. 이러면 for문 안에 있는 thread도 100개가 생성된다.
 * 이코드는 100개의 스레드가 필요해서 만든 코드이다.
 * 실제로 스레드를 처리하는 코드는 실행절에 있는데. 그럼 스레드가 100개 씩이나 필요하냐는 것이다.
 * 
 * 실행절을 처리하는 속도는 매우 빠르다. 예로 스레드가 10개 생성될쯤 첫번째 스레드가 실행이 종료된다고 가정해보자.
 * 그럼 11번째에 첫번째 스레드를 재사용하는게 좋겠다고 생각한다. 스레드가 10개째에서 첫번째 스레드가 종료가 되서
 * 스레드 하나가 놀고 있다 그럼 100개가 아니라 10개만 만들어도 된다는 것이다.
 * 
 * 100개의 스레드가 있어야 처리할수 있는 코드를 100개의 스레드를 생성해도 되지만. 10개만 생성해서 100개의 작업을 처리할수도 있다는 말이다.
 * 하지만 100개를 만들면 낭비다.
 * 
 * 스레드 풀이란 이런것이다. 제한된 스레드를 미리 만들어 놓는다 10개면 10개 20개면 20개 그다음 스레드한테 처리해달라고 요청만 하게되면 놀고 있는 스레드를 
 * 하나 잡고 요청을 처리한다.
 * 
 * 그림으로 보겠다.
 * 
 * <애플리 케이션>							<스레드 풀>																--------------------
 * |										|																		|	스레드1		    |			
 * |  										|																		|	3작업 처리	    |			
 * |										|																		|				    |			
 * |										|														-----------	>	|				    |								
 * |										|														|				|		▦ 	작업처리|			
 * |1. 스레드풀에		 					|														|				|				    |			
 * |	작업 처리 요청		   				|									    				|				|				    |			
 * |-------> ▦     _____ 					|														|				|				    |			
 * |		      		|					|				 <작업 큐>								|				--------------------			
 * |		 			|					|	 __________________________________					|												
 * |					|					|	|								   | ----------------												
 * |4.결과 전달    		|					|	|								   |																
 * |<-----스레드1     	----------------->	|	|  		.....▦ , ▦  , ▦ , ▦		   |																
 * |										|	|								   |																						
 * |					----------------->	|	|								   |			   
 * |					|					|	|								   | ----------------	
 * |					|					|	|__________________________________|				|
 * |					|					|							(2)각 스레드는 큐에서		|
 * |					|					|							작업을 가져와 처리함		|	
 * |					|					|														|				--------------------
 * |1.스레드 풀에		|					|														|				|	스레드1		    |
 * |	작업 처리 요청	|					|														|				|	3작업 처리	    |
 * |					|					|														|				|				    |
 * |-------> ▦     ------		 			|														------------>	|				    |
 * |										|																		|				    |			
 * |4.결과 전달  							|																		|		▦ 	작업처리|			
 * |<-----스레드1							|																		|				    |						
 * |										|																		|				    |			
 * |										|																		|				    |				
 * |										|																		--------------------										
 * |										|																													
 * |										|																					.
 * |										|																					.
 * |										|																					.
 * |										|																					.
 * |										|																		_____________________	
 * |										|																		|					|
 * 																													|		스레드 N	|
 * 																													---------------------		
 * 																														최대 갯수 제한
 * 
 * 그림을 보면서 설명하겠다.	 
 * 앞으로  pool이라는 용어가 나오면	여러 객체를 관리한다. 라고 생각하면 된다.
 * 스레드 풀은 그림 맨 오른쪽에 보이듯이 제한된 스레드를 미리 만들어 놓는다. 10개면 10개 20개면 20개
 * 그러면 10개의 스레드를 가지고 작업이 들어오게 되는데 (▦ 이 모양이 작업이다)	
 * 이런 작업을 저장하는 큐가 있다. 
 * 
 * 큐라는 것은 먼저 들어온 작업이 먼저 처리하는 것을 큐라고 한다. (큐는 나중에 자세히 나온다.)
 * 작업이 먼저 들어오면 앞에 그 다음 그 다음 쌓이게 된다																
 * 
 * 그럼 아까 제한한 스레드중 놀고 있는 스레드를 하나 지정해서 큐에 첫번째에 쌓인 작업을 놀고 있는 스레드가 처리한다. 
 * 그 다음 작업은 9개 스레드중 놀고있는 스레드 하나를 배정해서 작업을 처리한다.
 * 
 * 그런데 놀고 있는 스레드가 없다면 10개중에 제일 빨리 작업이 끝나는 스레드한테 11번째 작업을 수행하도록 한다. 그러면 처리해야하는 작업이 100개고 스레드가
 * 10개라도 10개의 스레드로 작업을 전부 처리할수 있다.
 *
 * 스레드 풀은 대충 이런 구조이다. 
 * 
 * 요약하자면 처음 스레드 풀을 만들때 내가 스레드를 몇개를 사용하겠다고 지정을 한다. 그리고 만든 스레트 풀한테 적업을 주면
 * 먼저 요청이 들어온 작업을 작업 큐에 작업 요청 순으로 쌓고 하나씩 하나씩 스레드에 배정해서 처리하고
 * 
 * 작업 큐의 작업 갯수가 스레드보다 많을 시에 먼저 작업 처리가 끝난 스레드한테 그다음 작업을 배정하는 방식이다.
 * 
 * 근데 스레드의 수가 너무 적게 되면 작업 양에 비해 너무 적으면 속도가 느려진다. 그래서 적절하게 스레드를 제한해야 한다. 늘려주고 줄여주고 해야한다는 소리다.
 *
 *<스레드 풀 생성> 10분 50초
 *
 */																													

public class ExecutorServiceExample {

}
