package ch14.multi_thread.ThreadSafeStop;

/*
 * <스레드 안전 종료>
 * 말그대로 스레드를 안전하게 종료하는거다 그럼 안전하게 종료 못하는 떄가 있는냐
 * 스레드는 실행 흐름이다 실행흐름을 갑자기 멈추게 되면 어떻게되냐 어떤 파일 작업을 할떄
 * 어떤 파일을 열어 놓고 쓰기작업을 할때 갑자기 중단을 해버리게 되면 파일이 꺠질수도 있다.
 * 또 동영상을 끝까지 보지 않고 사용자가 멈춤을 요구 하는 경우다.
 * 
 * 만약 예외가 발생하면 그 즉시 프로그램이 종료된다. 멀티 스레드 환경에서 스레드가 하나만 문제가 생겨도
 * 프로세스가 종료된다 그러면 다른 스레드는 문제가 없음에도 갑자기 종료가 일어난다.
 * 
 * 스레드가 갑자기 종료되면 스래드가 사용중이던 파일 리소스 자원들 데이터베이지 작업 내용이 데이터가 손실이 발생할수 있다
 * 그래서 가급적 코드로 스레드가 안전하게 종료될수 있도록 구현해야한다,
 * 
 * 스레드는 자신의 run()메소드가 모두 실행되면 자동적으로 종료된다 이게 가장 안전한 종료방법이다.
 * 경우에 따라서는 실행중인 스레드를 즉시
 * 종료해야 할 필요가 있다. 아까 설명한 동영상을 보다가 갑자기 멈춤을 요구할 때다.
 * 
 * 스레드에는 stop() 이라는 메소드가 있다. 말그대로 스레드를 멈추는 메소드이다.
 * 하지만 API 도큐먼트롤 보면 Deprecated 되어있다. 더 이상 이메소드를 사용하지 말라는 뜻이다.
 * 왜냐면 도큐먼트에 설명이 나와있는데 이 메소드는 스레드의 안전한 종료를 제공하고 있지 않기 떄문이다.
 * 사용했던 자원이 그대로 남아있을 가능성이 있다고 한다.
 * 
 * 그래서 가급적이면 stop()을 사용하지 말라고 한다.
 * 
 * 그러면 안전하게 종료하는 방법은 뭐냐
 * 사용했던 자원들을 일단 정리를 하고 갑자기 종료되더라도 자원들을 정리할 기회를 주는 것이다.
 * 파일 작업을 하고있다고 한다면 파일을 닫을수 있는 기회를 주는거다 그리고 빨리 run 메소드를 종료시키도록 해라
 * 
 * 그래서 주로 이용하는 방법은 조건을 이용하는 방법과 interrup() 메소드를 이용하는 방법이 있다.
 * 
 * <조건이용>
 * 스레드가 while문으로 반복 실행할 경우, 조건을 이용해서 run() 메소드의 종료를 유도할 수 있다.
 * 다음 코드는 stop필드 조건에 따라서 run() 메소드의 종료를 유도한다,
 * 
 * public class XXXThread extends Thread{
 * 
 * 	private boolean stop;  // 필드 선언
 * 
 * 	public void run(){
 * 		
 * 		while(!stop){ // stop이 true가 되면 while 문을 빠져나감	
 * 		  	스레드가 반복 실행하는 코드
 * 
 * 		}
 * 		스레드가 사용한 리소스 정리
 * 	}// 스레드 종료
 * 
 * }
 * 
 * 그럼 이제 실습 해보자
 *
 *	이번 예제는 메인 스레드에서 3초 후에 stop 필드 값을 true로 설정해서 PrintThread를 종료한다.
 */
		

public class PrintThread extends Thread{

	private boolean stop;
	
	public void SetStop(boolean stop) {// 외부에서 stop 값을 변경 가능
		this.stop = stop;
	}
	
	@Override
	public void run() {
		while(!stop) { // stop 필드값에 따라 반봅 여부 결정
			System.out.println("실행 중");
		}
		System.out.println("리소스 정리"); // 리소스 정리
		System.out.println("실행 종료");
	}
}



